1. Aggregate Functions

SELECT * FROM fake_apps;

Remove query and type. 
SELECT COUNT(*) FROM fake_apps;

2. Count 

SELECT COUNT(*) FROM fake_apps
WHERE price = 0;

remove query and type. 
SELECT price, COUNT(*) 
FROM fake_apps
GROUP BY price;

3. Group BY 

SELECT price, COUNT(*)
FROM fake_apps 
WHERE downloads >20000
GROUP BY price;

remove query and type. 
SELECT SUM(downloads) FROM fake_apps;

4. Sum 

SELECT category, SUM(downloads)
FROM fake_apps
GROUP BY category;

remove query and type 

SELECT MAX(downloads)
FROM fake_apps;

5. MAX

SELECT name, category, MAX(downloads)
FROM fake_apps
GROUP BY category;

remove query and type

SELECT MIN(downloads) FROM fake_apps;

6. Min

SELECT name, category, MIN(downloads)
FROM fake_apps
GROUP BY category;

remove query and type

SELECT AVG(downloads) FROM fake_apps;

7. Average 

SELECT price, AVG(downloads) FROM fake_apps
GROUP BY price;

remove query and type

SELECT price, ROUND(AVG(downloads), 2) FROM fake_apps
GROUP BY price;

8. Round

SELECT price, ROUND(AVG(downloads))
FROM fake_apps
GROUP BY price;

9. Generalisations 

Aggregate functions combine multiple rows together to form a single value of more meaningful information.
COUNT takes the name of a column(s) as an argument and counts the number of rows where the value(s) is not NULL.
GROUP BY is a clause used with aggregate functions to combine data from one or more columns.
SUM() takes the column name as an argument and returns the sum of all the values in that column.
MAX() takes the column name as an argument and returns the largest value in that column.
MIN() takes the column name as an argument and returns the smallest value in that column.
AVG() takes a column name as an argument and returns the average value for that column.
ROUND() takes two arguments, a column name and the number of decimal places to round the values in that column.

